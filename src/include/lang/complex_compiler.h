#ifndef BJUDGER_COMPLEX_COMPILER_H
#define BJUDGER_COMPLEX_COMPILER_H

#include "compiler.h"
#include <atomic>
#include <memory>
#include <mutex>

namespace bjudger
{
class ComplexCompiler : public Compiler
{
  private:
    std::atomic<size_t> position = 0; // The current position in the list of positions.
    std::mutex mtx; // Mutex for thread safety, which will only be used when adding or removing positions.
    std::vector<std::unique_ptr<Compiler>> compilers; // A list of compilers to be used in the compilation process.
  public:
    ComplexCompiler() = default;
    ~ComplexCompiler() = default;

    /**
     * @brief Adds a compiler to the collection.
     *
     * This function takes ownership of a compiler instance and adds it to the internal collection
     * of compilers. The compiler is managed using a unique pointer, ensuring that it is properly
     * destroyed when no longer needed.
     *
     * @param compiler A unique pointer to a Compiler instance to be added.
     */
    template <typename T> void addCompiler(std::unique_ptr<T> compiler)
    {
        std::lock_guard<std::mutex> lock(mtx);
        compilers.push_back(std::move(compiler));
    }

    /**
     * @brief Compiles the given source code.
     *
     * @param src A string view representing the source code to be compiled.
     * @return CompilerLog The result of the compilation process, including any errors or warnings.
     */
    virtual CompilerLog compile(std::string src) override;

    /**
     * @brief Compiles the given source code within the specified time limitation.
     *
     * @param src The source code to be compiled, provided as a std::string_view.
     * @param timeLimitation The maximum amount of time allowed for the compilation process, in milliseconds.
     * @return CompilerLog The log generated during the compilation process.
     */
    virtual CompilerLog compile(std::string src, size_t timeLimitation) override;

    /**
     * @brief Compiles the given source code with the specified arguments.
     *
     * @param src The source code to be compiled, provided as a string view.
     * @param argList A reference to a vector of strings containing the arguments for the compilation process.
     * @return CompilerLog The result of the compilation process, encapsulated in a CompilerLog object.
     */
    virtual CompilerLog compile(std::string src, std::vector<std::string> argList) override;

    /**
     * @brief Compiles the given source code with specified arguments and time limitation.
     *
     * @param src The source code to be compiled, provided as a string view.
     * @param argList A reference to a vector of strings containing the arguments for the compiler.
     * @param timeLimitation The time limit for the compilation process, specified in milliseconds.
     * @return CompilerLog The log generated by the compiler after attempting to compile the source code.
     */
    virtual CompilerLog compile(std::string src, std::vector<std::string> argList, size_t timeLimitation) override;
};
} // namespace bjudger

#endif // BJUDGER_COMPLEX_COMPILER_H